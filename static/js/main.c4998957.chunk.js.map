{"version":3,"sources":["Context/AppContext.js","Components/ButtonLightDark/index.js","Components/SvgClose/index.js","Components/PanelSearchGifs/images/logo-desktop-lighted.svg","Components/PanelSearchGifs/images/logo-desktop-dark.svg","Components/PanelSearchGifs/images/ilustra-header.svg","Components/PanelSearchGifs/images/icon-search-dark.svg","Components/PanelSearchGifs/index.js","Components/PanelGifs/index.js","Pages/Mainpage/index.js","App.js","index.js"],"names":["AppContext","React","createContext","initialState","gifs","isDark","isLoading","hasError","areThereGifsLoaded","AppContextProvider","props","useState","state","setState","setDark","setGifs","setIsLoading","setHasError","query","setQuery","numberGifsLoaded","setNumberGifsLoades","useEffect","prevState","URL","fetch","then","response","ok","json","length","data","catch","err","fnSearchGifs","Provider","value","fnIsDark","fnSetQueryGif","q","fnNumberGifLoades","number","children","ButtonLightDark","useContext","className","onClick","SvgClose","fill","width","height","viewBox","xmlns","d","PanelSearchGifs","autocomplete","setAutocomplete","handleOnsubmit","event","preventDefault","handleClick","fnAutocompleteSearch","searchDataList","id","map","item","index","name","imgLogo","src","ImgLogoDesktopDark","alt","ImgLogoDesktopLighted","onSubmit","ImgIlustraHeader","onChange","target","list","placeholder","ImgIconSearchDark","PanelGifts","numberOfGifLoaded","setNumberOfGifLoaded","handleOnLoad","containerPanelGifs","gif","embed_url","title","onLoad","Mainpage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4998957.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport const AppContext = React.createContext({});\r\n\r\nconst initialState = {\r\n    gifs: [],\r\n    isDark: false,\r\n    isLoading: false,\r\n    hasError: false,\r\n    areThereGifsLoaded: false\r\n}\r\n\r\nexport default function AppContextProvider(props){\r\n\r\n    const [state, setState] = useState(initialState);\r\n    const [isDark, setDark] = useState(initialState.isDark);\r\n    const [gifs, setGifs] = useState(initialState.gifs);\r\n    const [isLoading, setIsLoading] = useState(initialState.isLoading);\r\n    const [hasError, setHasError] = useState(initialState.hasError);\r\n    const [query, setQuery] = useState(\"\");\r\n    const [numberGifsLoaded, setNumberGifsLoades] = useState(0);\r\n\r\n    const fnSearchGifs = (query) => {\r\n        const URL = `https://api.giphy.com/v1/gifs/search?api_key=ye61aPhLiiIS871RxxNNlcrW3f98fC9z&q=${query}&limit=12`;\r\n        setIsLoading(true);\r\n        fetch(URL)\r\n            .then(response => {\r\n                if(!response.ok){\r\n                    setHasError(true);\r\n                    setIsLoading(false);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(response => {\r\n                if(query.length === 0){\r\n                    setHasError(false);\r\n                    setIsLoading(false);\r\n                    setGifs([]);\r\n                }\r\n                else if(query.length > 0 && response.data.length === 0){\r\n                    setHasError(true);\r\n                    setIsLoading(false);\r\n                }\r\n                else {\r\n                    setGifs(response.data);\r\n                    setIsLoading(false);\r\n                    setState((prevState) => ({...prevState, areThereGifsLoaded: false}));\r\n                }\r\n            })\r\n            .catch(err => {\r\n                setHasError(true);\r\n                setIsLoading(false);\r\n            })\r\n    }\r\n\r\n    const fnNumberGifLoades = (number) => {\r\n        setNumberGifsLoades(number);\r\n    }\r\n    \r\n    const fnSetQueryGif = (q) => {\r\n        setQuery(q);\r\n    }\r\n\r\n    const fnIsDark = () => {\r\n        setDark(!isDark);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setState((prevState) => ({...prevState, isLoading}));\r\n    }, [isLoading]);\r\n    \r\n    useEffect(() => {\r\n        setState((prevState) => ({...prevState, hasError}));\r\n    }, [hasError]);\r\n\r\n    useEffect(() => {\r\n        setState((prevState) => ({...prevState, gifs}));\r\n    }, [gifs]);\r\n\r\n    useEffect(() => {\r\n        setState((prevState) => ({...prevState, isDark}));\r\n    }, [isDark]);\r\n\r\n    useEffect(() => {\r\n        fnSearchGifs(query);\r\n    }, [query]);\r\n\r\n    useEffect(() => {\r\n        if(numberGifsLoaded === 11){\r\n            setState((prevState) => ({...prevState, areThereGifsLoaded: true}));\r\n            setNumberGifsLoades(0);\r\n        }       \r\n    }, [numberGifsLoaded]);\r\n\r\n    return(\r\n        <AppContext.Provider value={{state, setState, fnIsDark, fnSetQueryGif, fnNumberGifLoades}}>\r\n            {props.children}\r\n        </AppContext.Provider>\r\n    )\r\n}","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../../Context/AppContext\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default function ButtonLightDark(props){\r\n    const { state, setState } = useContext(AppContext);\r\n\r\n    const handleClick = () => {\r\n        setState((prevState) => ({...prevState, isDark: !state.isDark}))\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <button className={state.isDark ? \"btn btn_dark\" : \"btn btn_light\"} onClick={handleClick}>\r\n                {state.isDark ? \"MODO LIGHT\" : \"MODO DARK\"}\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport default function SvgClose(props) {\r\n\r\n    const {fill, width, height} = props;\r\n\r\n    return (\r\n        <div>\r\n            <svg \r\n                fill={fill} \r\n                width={width} \r\n                height={height}\r\n                viewBox=\"0 0 365.696 365.696\" \r\n                xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"m243.1875 182.859375 113.132812-113.132813c12.5-12.5 12.5-32.765624 0-45.246093l-15.082031-15.082031c-12.503906-12.503907-32.769531-12.503907-45.25 0l-113.128906 113.128906-113.132813-113.152344c-12.5-12.5-32.765624-12.5-45.246093 0l-15.105469 15.082031c-12.5 12.503907-12.5 32.769531 0 45.25l113.152344 113.152344-113.128906 113.128906c-12.503907 12.503907-12.503907 32.769531 0 45.25l15.082031 15.082031c12.5 12.5 32.765625 12.5 45.246093 0l113.132813-113.132812 113.128906 113.132812c12.503907 12.5 32.769531 12.5 45.25 0l15.082031-15.082031c12.5-12.503906 12.5-32.769531 0-45.25zm0 0\" />\r\n            </svg>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/logo-desktop-lighted.2f122678.svg\";","export default __webpack_public_path__ + \"static/media/logo-desktop-dark.47e214b1.svg\";","export default __webpack_public_path__ + \"static/media/ilustra-header.ba595ba5.svg\";","export default __webpack_public_path__ + \"static/media/icon-search-dark.ecc2b197.svg\";","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { AppContext } from \"../../Context/AppContext\";\r\nimport ButtonLightDark from \"../ButtonLightDark\";\r\nimport SvgClose from \"../SvgClose\";\r\n\r\nimport ImgLogoDesktopLighted from \"./images/logo-desktop-lighted.svg\";\r\nimport ImgLogoDesktopDark from \"./images/logo-desktop-dark.svg\";\r\nimport ImgIlustraHeader from \"./images/ilustra-header.svg\";\r\nimport ImgIconSearchDark from \"./images/icon-search-dark.svg\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default function PanelSearchGifs(){\r\n\r\n    const { state, fnSetQueryGif } = useContext(AppContext);\r\n    const [query, setQuery] = useState(\"\");\r\n    const [autocomplete, setAutocomplete] = useState([]);\r\n    const STR_RESULT = \"Resultados de la búsqueda\";\r\n    const STR_SEARCH = \"Busca los GIFS! que te gusten\";\r\n    const STR_ERROR = \"No se encontraron GIFS :`(\";\r\n    const STR_LOADING = \"... cargando los GIFS! ...\"\r\n\r\n    const handleChange = (event) => {\r\n        setQuery(event.target.value);\r\n    }\r\n\r\n    const handleOnsubmit = (event) => {\r\n        event.preventDefault();\r\n        fnSetQueryGif(query);\r\n    }\r\n\r\n    const handleClick = () => {\r\n        setQuery(\"\");\r\n    }\r\n\r\n    const fnAutocompleteSearch = (q) => {\r\n        const URL = `https://api.giphy.com/v1/gifs/search/tags?api_key=ye61aPhLiiIS871RxxNNlcrW3f98fC9z&q=${q}`;\r\n        fetch(URL)\r\n            .then(response => response.json())\r\n            .then(response => setAutocomplete(response.data))\r\n    }\r\n\r\n    useEffect(() => {\r\n        fnAutocompleteSearch(query);\r\n    }, [query]);\r\n\r\n    useEffect(() => {\r\n        if(query.length === 0){\r\n            fnSetQueryGif(query);\r\n        }\r\n    }, [query]);\r\n\r\n    const searchDataList = (\r\n        <datalist id=\"search_gifs\">\r\n            {(autocomplete.length > 0) && autocomplete.map((item, index) => {\r\n                return <option key={index} value={item.name}></option>;\r\n            })}\r\n        </datalist>\r\n    )\r\n\r\n    const imgLogo = state.isDark === true ? (\r\n        <img src={ImgLogoDesktopDark} alt=\"logo lighted\" width=\"65px\"/>\r\n    ) : (\r\n        <img src={ImgLogoDesktopLighted} alt=\"logo lighted\" width=\"65px\"/>\r\n    )\r\n    \r\n    return(\r\n        <div className={`container_panel_search_gifs ${state.isDark === true ? \"cpsg_dark\": \"cpsg_light\"}`}>\r\n            <header>\r\n                <div>\r\n                    <div className=\"img_logo_size\">\r\n                        {imgLogo}\r\n                    </div>\r\n                    <ButtonLightDark />\r\n                </div>\r\n            </header>\r\n            <h4 className={state.isDark === true ? \"hx_dark\": \"hx_light\"}>\r\n                ¡Inspirate y busca los mejores <span>GIFS!</span>\r\n            </h4>\r\n            <form onSubmit={handleOnsubmit}>\r\n                <img src={ImgIlustraHeader} alt=\"logo principal\"/>\r\n                <div>\r\n                    <input \r\n                        onChange={handleChange}\r\n                        onSubmit={(event) => handleOnsubmit(event, \"input\")}\r\n                        list=\"search_gifs\"\r\n                        className={state.isDark === true ? \"input_dark\": \"input_light\"}\r\n                        value={query}\r\n                        placeholder=\"busca gifs\"/>\r\n                {state.isDark ? (\r\n                    <div className=\"btn_search_dark\" onClick={handleClick}>\r\n                        {query.length > 0 ? (\r\n                                <SvgClose fill=\"white\" width=\"20px\"/>\r\n                            ) : (\r\n                                <img src={ImgIconSearchDark} alt=\"search\"/>\r\n                            )}\r\n                    </div>\r\n                    ) : (\r\n                    <div className=\"btn_search_light\" onClick={handleClick}>\r\n                        {query.length > 0 ? (\r\n                            <SvgClose fill=\"white\" width=\"20px\"/>\r\n                        ) : (\r\n                            <img src={ImgIconSearchDark} alt=\"search\"/>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                </div>\r\n                {searchDataList}\r\n            </form>\r\n            <h6 className={state.isDark === true ? \"hx_dark\": \"hx_light\"}>\r\n                {state.hasError ? STR_ERROR : (state.gifs.length > 0 ? (state.areThereGifsLoaded ? STR_RESULT : STR_LOADING) : STR_SEARCH)}\r\n            </h6>\r\n        </div>\r\n    )\r\n}","import React, { useContext, useState } from \"react\";\r\nimport { AppContext } from \"../../Context/AppContext\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default function PanelGifts(){\r\n\r\n    const { state, fnNumberGifLoades } = useContext(AppContext);\r\n    const [numberOfGifLoaded, setNumberOfGifLoaded] = useState(0);\r\n\r\n    const handleOnLoad = () => {\r\n        fnNumberGifLoades(numberOfGifLoaded);\r\n        setNumberOfGifLoaded(numberOfGifLoaded+1);\r\n        if(numberOfGifLoaded === 11){\r\n            setNumberOfGifLoaded(0);\r\n        }\r\n    }\r\n\r\n    const containerPanelGifs = (\r\n        <div className={`container_panel_gifts ${state.isDark ? \"cpg_dark\" : \"cpg_light\"}`}>\r\n            <div className={`container_gifs`}>\r\n                {state.gifs.map(gif => {\r\n                    return <iframe key={gif.id} src={gif.embed_url} title={gif.title} onLoad={handleOnLoad}></iframe>\r\n                    //return <img key={gif.id} src={gif.images.downsized.url} alt=\"animated gif\"/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    return(\r\n        <>{(state.gifs.length > 0) && containerPanelGifs}</>\r\n    )\r\n}","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../../Context/AppContext\";\r\nimport PanelSearchGifs from \"../../Components/PanelSearchGifs\";\r\nimport PanelGifs from \"../../Components/PanelGifs\";\r\n\r\nimport \"./styles.css\";\r\n\r\nexport default function Mainpage(){\r\n\r\n    const { state } = useContext(AppContext);\r\n\r\n    return(\r\n        <div className={`container_main_page ${state.isDark === true ? \"cmp_dark\": \"cmp_ligth\"}`}>\r\n            <div className={`container_main_page_border ${!(state.gifs.length > 0) && \"cmpb_vport\"}`}>\r\n                    <PanelSearchGifs />\r\n                    <PanelGifs />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport AppContextProvider from \"./Context/AppContext\";\r\nimport Mainpage from \"./Pages/Mainpage\";\r\n\r\nimport \"./App.css\";\r\n\r\nexport default function App(){\r\n\r\n    return(\r\n        <AppContextProvider>\r\n                <Mainpage />\r\n        </AppContextProvider>\r\n    )\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}